Dart compiler take `main` function as an entry point to the execution process

Flutter starts the application with the main widget passed as argument in `runApp` function

The `runApp` function is the starting point that used to determine which widget is the root view and to fill it in the screen

Everything in flutter consists of widgets, so a typical flutter app is a set of composed widgets
that forms the view and it's defined by widgets tree

Widget is the basic building block of flutter application, it represents an aspect in the view
REVIEW widgets are immutable their value cannot be changed by widgets itself can be replaced by another.

Widgets are mutable that means if any of it's properties changed it will not trigger to change in the view
but they carry a state that responsible about reflect the changes to the view

There's two types of widget, stateless and state full
Stateless means that it doesn't hold any mutable state (aka data) that needs to track
therefore they cannot rebuild the widget in their own

__ State Full widget is the widget that carry state that can update the view whenever the setState function called
the `setState` function rebuilds the widget to apply the changes

Scaffold is a widget that defines the structure of the application, like the bar, footer, body

An element is the active mounted widget

Element tree represents what's actually displayed in the device at any given moment,
it's like a snapshot of the current widget tree

When widget attached to the tree is called a `createElement` method, therefore a widget has a corresponding element

So the app now has two trees:
one that represents whatâ€™s actually on the screen (the elements),
and one that holds the blueprints they were made from (the widgets).

__ `BuildContext` is the position of widget in widget tree

__ `didUpdatedWidget` called after `setState` called

# Async Widgets

-- FutureBuilder Widget used when you have a future value, such as hitting the server and return an http response as Future instance.
this widget will resolve the value automatically and everything okay but be aware of thing here that when the widget build again
it will resolve the value again therefore our function will hit the server asking for a result and this not out typical use from FutureWidget

-- StreamBuilder Widget
NOTE

-- Complixity of decoding and encoding of json
Why not just make a function that will take the model and the json and parse them, here we need to make this two method in each model class
the reason is that dart doesn't support reflection right now therefore we can optain the types and properties of dart at runtime (there are a 3rdparty libs)
abd about `toJson` method, this don't need any props reflection!
it didn't need a reflection, but to ensure that we hit the server without any wrong by explicity writing what the attributes that we need



TODO implement streaming and charts
TODO implement push notification, broadcast, multicast and unicast
TODO analytic and error service
TODO setup multiple environment
TODO setup file generation per screen
TODO various interceptor {take a look into angular buildozer interceptors}
TODO add git hocks for linting and check code healthy
firebase analytics 
firebase app indexing
A/B Testing
Cloud Messaging (FCM) | IOS
Crashlytics
Dynamic Links
Performance Monitoring
Predictions
Remote Config


To get the height without toolbar size
double abovePadding = MediaQuery.of(context).padding.top;
double appBarHeight = appBar.preferredSize.height;
double leftHeight = screenHeight - abovePadding - appBarHeight;